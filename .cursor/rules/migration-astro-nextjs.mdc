---
alwaysApply: false
description: "Guia completo para migração do Astro para Next.js + ShadCN UI + Tailwind CSS"
---

# Migração Astro → Next.js

## Visão Geral da Migração

Este guia documenta a migração completa do projeto wiki.ai.br do Astro para Next.js com ShadCN UI e Tailwind CSS, baseado nas melhores práticas e documentação oficial.

## 1. Configuração Inicial do Next.js

### Instalação do Next.js
```bash
npx create-next-app@latest my-project --typescript --eslint --app
cd my-project
```

### Estrutura de Pastas Após Migração
```
src/
  app/                    # App Router (Next.js 13+)
    layout.tsx           # Layout raiz da aplicação
    page.tsx             # Página inicial
    globals.css          # Estilos globais
    loading.tsx          # Loading UI
    not-found.tsx        # 404 page
  components/            # Componentes reutilizáveis
    ui/                  # Componentes ShadCN
  lib/                   # Utilitários
    utils.ts             # Funções utilitárias
  content/               # Conteúdo MDX
public/                  # Assets estáticos
```

### Scripts de Desenvolvimento
```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}
```

## 2. Migração de Componentes Astro

### Conversão de Componentes .astro para .tsx
**Antes (Astro):**
```astro
---
// Component logic
const { title } = Astro.props;
---

<div class="card">
  <h2>{title}</h2>
</div>

<style>
  .card { padding: 1rem; }
</style>
```

**Depois (React/Next.js):**
```tsx
interface CardProps {
  title: string;
}

export function Card({ title }: CardProps) {
  return (
    <div className="p-4">
      <h2>{title}</h2>
    </div>
  );
}
```

### Migração de Layouts
**Layout Astro:**
```astro
---
// src/layouts/BaseLayout.astro
const { title } = Astro.props;
---

<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
  </head>
  <body>
    <slot />
  </body>
</html>
```

**Layout Next.js:**
```tsx
// app/layout.tsx
export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="pt-BR">
      <body>{children}</body>
    </html>
  );
}
```

## 3. Configuração do Tailwind CSS

### Instalação
```bash
npm install tailwindcss @tailwindcss/postcss postcss
```

### Configuração do tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: 'selector',
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: '#1a365d',
        secondary: '#2d3748',
        accent: '#3182ce'
      }
    },
  },
  plugins: [],
}
```

### Configuração do PostCSS
```javascript
// postcss.config.mjs
const config = {
  plugins: {
    "@tailwindcss/postcss": {},
  },
};

export default config;
```

### Importação no CSS Global
```css
/* app/globals.css */
@import "tailwindcss";
```

## 4. Instalação e Configuração do ShadCN UI

### Inicialização
```bash
npx shadcn@latest init
```

### Configuração Interativa
```
Would you like to use TypeScript (recommended)? yes
Which style would you like to use? › Default
Which color would you like to use as base color? › Slate
Where is your global CSS file? › app/globals.css
Do you want to use CSS variables for colors? › yes
Where is your tailwind.config.js located? › tailwind.config.js
Configure the import alias for components: › @/components
Configure the import alias for utils: › @/lib/utils
Are you using React Server Components? › yes
```

### Adicionando Componentes
```bash
# Componentes essenciais
npx shadcn@latest add button
npx shadcn@latest add card
npx shadcn@latest add input
npx shadcn@latest add textarea
npx shadcn@latest add sidebar
npx shadcn@latest add breadcrumb
npx shadcn@latest add navigation-menu
```

### Estrutura de Componentes ShadCN
```
components/
  ui/
    button.tsx
    card.tsx
    input.tsx
    sidebar.tsx
    breadcrumb.tsx
    navigation-menu.tsx
  theme-provider.tsx
  theme-toggle.tsx
```

## 5. Configuração do Dark Mode com next-themes

### Instalação
```bash
npm install next-themes
```

### ThemeProvider Component
```tsx
// components/theme-provider.tsx
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

### Integração no Layout Raiz
```tsx
// app/layout.tsx
import { ThemeProvider } from "@/components/theme-provider"

export default function RootLayout({ children }: React.ReactNode) {
  return (
    <html lang="pt-BR" suppressHydrationWarning>
      <body>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  )
}
```

### Theme Toggle Component
```tsx
// components/theme-toggle.tsx
"use client"

import * as React from "react"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"

export function ThemeToggle() {
  const { setTheme, theme } = useTheme()

  return (
    <Button
      variant="outline"
      size="icon"
      onClick={() => setTheme(theme === "light" ? "dark" : "light")}
    >
      <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}
```

## 6. Migração de Conteúdo MDX

### Configuração do MDX no Next.js
```javascript
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    mdxRs: true,
  },
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
}

module.exports = nextConfig
```

### Estrutura de Conteúdo
```
content/
  blog/
    inteligencia-artificial/
      introducao-a-ia.mdx
      machine-learning.mdx
    prompts/
      prompt-engineering.mdx
      melhores-praticas.mdx
```

### Exemplo de Arquivo MDX
```mdx
---
title: "Introdução à Inteligência Artificial"
description: "Conceitos fundamentais de IA explicados de forma clara"
date: "2024-01-15"
---

import { Callout } from "@/components/ui/callout"

# Introdução à Inteligência Artificial

<Callout type="info">
  Este artigo aborda os conceitos fundamentais da Inteligência Artificial.
</Callout>

## O que é IA?

A Inteligência Artificial (IA) é um campo da ciência da computação que visa criar máquinas capazes de realizar tarefas que normalmente requerem inteligência humana.

## Tipos de IA

### IA Fraca (Narrow AI)
- Focada em tarefas específicas
- Exemplos: reconhecimento de voz, visão computacional

### IA Forte (General AI)
- Capacidade de aprender e aplicar conhecimento em diferentes domínios
- Ainda em desenvolvimento
```

## 7. Configuração de Navegação

### Estrutura de Rotas
```
app/
  (main)/
    page.tsx              # /
    about/
      page.tsx            # /about
    blog/
      page.tsx            # /blog
      [slug]/
        page.tsx          # /blog/[slug]
  inteligencia-artificial/
    page.tsx              # /inteligencia-artificial
  prompts/
    page.tsx              # /prompts
  ferramentas/
    page.tsx              # /ferramentas
  tutoriais/
    page.tsx              # /tutoriais
  casos-de-uso/
    page.tsx              # /casos-de-uso
```

### Componente de Sidebar
```tsx
// components/app-sidebar.tsx
"use client"

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

const menuItems = [
  { title: "Home", url: "/" },
  { title: "Inteligência Artificial", url: "/inteligencia-artificial" },
  { title: "Prompts", url: "/prompts" },
  { title: "Ferramentas", url: "/ferramentas" },
  { title: "Tutoriais", url: "/tutoriais" },
  { title: "Casos de Uso", url: "/casos-de-uso" },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Wiki AI Brasil</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {menuItems.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

## 8. SEO e Meta Tags

### Metadata API do Next.js
```tsx
// app/blog/[slug]/page.tsx
import { Metadata } from 'next'

interface PageProps {
  params: { slug: string }
}

export async function generateMetadata({ params }: PageProps): Promise<Metadata> {
  const post = await getPostBySlug(params.slug)

  return {
    title: post.title,
    description: post.description,
    openGraph: {
      title: post.title,
      description: post.description,
      images: [post.heroImage],
    },
  }
}

export default function BlogPost({ params }: PageProps) {
  // Component logic
}
```

## 9. Configuração de Build e Deploy

### next.config.js Final
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    mdxRs: true,
  },
  images: {
    domains: ['localhost'],
  },
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
}

module.exports = nextConfig
```

### Scripts de Build
```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  }
}
```

## 10. Checklist de Migração

### ✅ Fase 1: Setup Básico
- [ ] Next.js instalado e configurado
- [ ] Tailwind CSS configurado
- [ ] ShadCN UI inicializado
- [ ] Estrutura de pastas criada

### ✅ Fase 2: Componentes
- [ ] Componentes Astro migrados para React
- [ ] Layouts convertidos
- [ ] Dark mode implementado
- [ ] Componentes ShadCN integrados

### ✅ Fase 3: Conteúdo
- [ ] Sistema MDX configurado
- [ ] Conteúdo migrado
- [ ] Rotas configuradas
- [ ] Navegação implementada

### ✅ Fase 4: Otimizações
- [ ] SEO configurado
- [ ] Performance otimizada
- [ ] Acessibilidade verificada
- [ ] Build testado

## 11. Comandos Úteis Durante Migração

```bash
# Verificar se tudo está funcionando
npm run dev

# Verificar tipos TypeScript
npm run type-check

# Verificar linting
npm run lint

# Build de produção
npm run build

# Preview do build
npm run start
```

## 12. Resolução de Problemas Comuns

### Hydration Mismatch
- Sempre use `suppressHydrationWarning` no html quando usar next-themes
- Evite renderizar componentes dependentes de tema no servidor

### Estilos não Aplicados
- Verifique se Tailwind está importado em `globals.css`
- Confirme se `tailwind.config.js` tem os caminhos corretos

### Componentes ShadCN não Funcionam
- Execute `npx shadcn@latest init` novamente
- Verifique se `components.json` está correto

### MDX não Carrega
- Adicione `mdxRs: true` em `next.config.js`
- Inclua `.mdx` em `pageExtensions`

Este guia serve como referência completa para a migração do projeto wiki.ai.br, garantindo uma transição suave e mantendo todas as funcionalidades originais.